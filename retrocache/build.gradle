apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply from: '../quality/quality.gradle'

group = 'com.github.iagocanalejas'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.compileSdkVersion
        versionCode project.libraryCode
        versionName project.libraryName
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "com.squareup.okhttp3:mockwebserver:$mockwebserver"
    testCompile "org.assertj:assertj-core:$assertj"
    testCompile "org.mockito:mockito-core:$mockito"

    compile "com.android.support:support-annotations:$supportLib"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile("com.squareup.retrofit2:retrofit:$retrofit") {
        exclude module: 'okhttp'
    }
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp"
    compile "com.github.iagocanalejas.dualcache:dualcache:$dualcache"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}